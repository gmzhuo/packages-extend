#!/bin/sh
[ -z "$2" ] && echo "Error: should be run by odhcpc6c" && exit 1

. /usr/share/libubox/jshn.sh

#printenv >/dev/console

setup_interface () {
	local device="$1"
	local prefsig=""
	local addrsig=""

	# Apply IPv6 / ND configuration
	HOPLIMIT=$(cat /proc/sys/net/ipv6/conf/$device/hop_limit)
	[ -n "$RA_HOPLIMIT" -a -n "$HOPLIMIT" ] && [ "$RA_HOPLIMIT" -gt "$HOPLIMIT" ] && echo "$RA_HOPLIMIT" > /proc/sys/net/ipv6/conf/$device/hop_limit
	[ -n "$RA_MTU" ] && [ "$RA_MTU" -ge 1280 ] && echo "$RA_MTU" > /proc/sys/net/ipv6/conf/$device/mtu 2>/dev/null
	[ -n "$RA_REACHABLE" ] && [ "$RA_REACHABLE" -gt 0 ] && echo "$RA_REACHABLE" > /proc/sys/net/ipv6/neigh/$device/base_reachable_time_ms
	[ -n "$RA_RETRANSMIT" ] && [ "$RA_RETRANSMIT" -gt 0 ] && echo "$RA_RETRANSMIT" > /proc/sys/net/ipv6/neigh/$device/retrans_time_ms

	json_init
	json_add_string "Action" "Setup"
	json_add_string "Interface" ${INTERFACE}

	# Merge RA-DNS
	for radns in $RA_DNS; do
		local duplicate=0
		for dns in $RDNSS; do
			[ "$radns" = "$dns" ] && duplicate=1
		done
		[ "$duplicate" = 0 ] && RDNSS="$RDNSS $radns"
	done

	json_add_array "DNS"
	for dns in $RDNSS; do
		json_add_string "dns" "$dns"
	done
	json_close_array

	for radomain in $RA_DOMAINS; do
		local duplicate=0
		for domain in $DOMAINS; do
			[ "$radomain" = "$domain" ] && duplicate=1
		done
		[ "$duplicate" = 0 ] && DOMAINS="$DOMAINS $radomain"
	done

	json_add_array "Domains"
	for domain in $DOMAINS; do
		json_add_string "domain" "$domain"
	done
	json_close_array

	json_add_array "Prefixs"
	for prefix in $PREFIXES; do
		#proto_add_ipv6_prefix "$prefix"
		logger "aa $prefix"
		prefsig="$prefsig ${prefix%%,*}"
		local entry="${prefix#*/}"
		entry="${entry#*,}"
		entry="${entry#*,}"
		local valid="${entry%%,*}"

		if [ -z "$RA_ADDRESSES" -a -z "$RA_ROUTES" -a \
				-z "$RA_DNS" -a "$FAKE_ROUTES" = 1 ]; then
			RA_ROUTES="::/0,$SERVER,$valid,4096"
		fi
		json_add_string "prefix" "$prefix"
		logger "bb"
	done

	for prefix in $USERPREFIX; do
		json_add_string "prefix" "$prefix"
	done

	json_close_array
	logger "cc"

	# Merge addresses
	for entry in $RA_ADDRESSES; do
		local duplicate=0
		local addr="${entry%%/*}"
		for dentry in $ADDRESSES; do
			local daddr="${dentry%%/*}"
			[ "$addr" = "$daddr" ] && duplicate=1
		done
		[ "$duplicate" = "0" ] && ADDRESSES="$ADDRESSES $entry"
	done

	logger "dd"
	json_add_array "Addresses"
	for entry in $ADDRESSES; do
		local addr="${entry%%/*}"
		entry="${entry#*/}"
		local mask="${entry%%,*}"
		entry="${entry#*,}"
		local preferred="${entry%%,*}"
		entry="${entry#*,}"
		local valid="${entry%%,*}"

		json_add_object "Address"
		json_add_string "Address" "$addr"
		json_add_string "Mask" "$mask"
		json_add_string "Preferred" "$preferred"
		json_add_string "Valid" "$valid"
		json_close_object

		addrsig="$addrsig $addr/$mask"

		if [ -z "$RA_ADDRESSES" -a -z "$RA_ROUTES" -a \
				-z "$RA_DNS" -a "$FAKE_ROUTES" = 1 ]; then
			RA_ROUTES="::/0,$SERVER,$valid,4096"
		fi

		# RFC 7278
		if [ "$mask" -eq 64 -a -z "$PREFIXES" -a -n "$EXTENDPREFIX" ]; then

			local raroutes=""
			for route in $RA_ROUTES; do
				local prefix="${route%%/*}"
				local entry="${route#*/}"
				local pmask="${entry%%,*}"
				entry="${entry#*,}"
				local gw="${entry%%,*}"

				[ -z "$gw" -a "$mask" = "$pmask" ] && {
					case "$addr" in
						"${prefix%*::}"*) continue;;
					esac
				}
				raroutes="$raroutes $route"
			done
			RA_ROUTES="$raroutes"
		fi
	done
	json_close_array

	logger "ff"
	json_add_array "Routes"
	for entry in $RA_ROUTES; do
		logger "route s $entry"
		local duplicate=$NOSOURCEFILTER
		local addr="${entry%%/*}"
		entry="${entry#*/}"
		local mask="${entry%%,*}"
		entry="${entry#*,}"
		local gw="${entry%%,*}"
		entry="${entry#*,}"
		local valid="${entry%%,*}"
		entry="${entry#*,}"
		local metric="${entry%%,*}"

		for xentry in $RA_ROUTES; do
			local xprefix="${xentry%%,*}"
			xentry="${xentry#*,}"
			local xgw="${xentry%%,*}"

			[ -n "$gw" -a -z "$xgw" -a "$addr/$mask" = "$xprefix" ] && duplicate=1
		done

		if [ -z "$gw" -o "$duplicate" = 1 ]; then
			json_add_object "Route"
			json_add_string "Address" "$addr"
			json_add_string "Netmask" "$mask"
			json_add_string "Gateway" "$gw"
			json_add_string "Metric" "$metric"
			json_add_string "Valid" "$valid"
			json_close_object
		else
			logger "ax"
			for prefix in $PREFIXES $ADDRESSES; do
				local paddr="${prefix%%,*}"
				json_add_object "Route"
				json_add_string "Address" "$addr"
				json_add_string "Netmask" "$mask"
				json_add_string "Gateway" "$gw"
				json_add_string "Metric" "$metric"
				json_add_string "Valid" "$valid"
				json_add_string "PrefixesAddress" "$paddr"
				json_close_object
			done
			logger "ax-f"
		fi
		logger "aaaaaaaaaaaaaaaaaaaaaaa"
	done
	json_close_array

	logger "uuuuu"
	[ -n "$CER" ] && json_add_string cer "$CER"
	[ -n "$PASSTHRU" ] && json_add_string passthru "$PASSTHRU"
	[ -n "$ZONE" ] && json_add_string zone "$ZONE"

	logger "$(json_dump)"
	ubus -s "/var/run/ubus.servd.sock" send "Service.DHCPv6.Client" "$(json_dump)"
}

teardown_interface() {
	ubus -s "/var/run/ubus.servd.sock" send "Service.DHCPv6.Client" '{"Action":"Teardown","Interface":"${Addresses}"}'
}

MESSAGE=$(printenv)
logger "$MESSAGE"

logger "$INTERFACE $1 $2 $3 $4"

case "$2" in
	bound)
		teardown_interface "$1"
		setup_interface "$1"
	;;
	informed|updated|rebound)
		setup_interface "$1"
	;;
	ra-updated)
		[ -n "$ADDRESSES$RA_ADDRESSES$PREFIXES$USERPREFIX" ] && setup_interface "$1"
	;;
	started|stopped|unbound)
		teardown_interface "$1"
	;;
esac

exit 0

